# Kubernetes Deployment for Temporal Workers
# Production-ready configuration with auto-scaling and monitoring

apiVersion: apps/v1
kind: Deployment
metadata:
  name: temporal-worker
  namespace: temporal
  labels:
    app: temporal-worker
    version: v1.0.0
    component: worker
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: temporal-worker
  template:
    metadata:
      labels:
        app: temporal-worker
        version: v1.0.0
        component: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: temporal-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: temporal-worker
        image: temporal-worker:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: TEMPORAL_ADDRESS
          value: "temporal-server:7233"
        - name: TEMPORAL_NAMESPACE
          value: "default"
        - name: TEMPORAL_TASK_QUEUE
          value: "production-task-queue"
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: temporal-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: temporal-secrets
              key: database-url
        - name: LOG_LEVEL
          value: "info"
        - name: METRICS_PORT
          value: "3000"
        - name: ENABLE_PERFORMANCE_OPTIMIZATION
          value: "true"
        - name: ENABLE_MONITORING
          value: "true"
        - name: KUBERNETES_ENVIRONMENT
          value: "true"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: worker-config
          mountPath: /app/config
          readOnly: true
        - name: worker-logs
          mountPath: /app/logs
        - name: temp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: worker-config
        configMap:
          name: temporal-worker-config
      - name: worker-logs
        emptyDir: {}
      - name: temp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - temporal-worker
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "temporal-worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: temporal-worker-service
  namespace: temporal
  labels:
    app: temporal-worker
    component: worker
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: metrics
  selector:
    app: temporal-worker

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: temporal-worker
  namespace: temporal
  labels:
    app: temporal-worker

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: temporal
  name: temporal-worker-role
rules:
- apiGroups: [""]
  resources: ["pods", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: temporal-worker-binding
  namespace: temporal
subjects:
- kind: ServiceAccount
  name: temporal-worker
  namespace: temporal
roleRef:
  kind: Role
  name: temporal-worker-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: temporal-worker-config
  namespace: temporal
  labels:
    app: temporal-worker
data:
  worker.json: |
    {
      "taskQueue": "production-task-queue",
      "namespace": "default",
      "maxConcurrentActivityTaskExecutions": 10,
      "maxConcurrentWorkflowTaskExecutions": 5,
      "maxConcurrentLocalActivityExecutions": 20,
      "maxActivitiesPerSecond": 1000,
      "maxTaskQueueActivitiesPerSecond": 500,
      "autoTuning": {
        "enabled": true,
        "adjustmentIntervalMs": 30000,
        "highCpuThreshold": 80,
        "lowCpuThreshold": 20,
        "highMemoryThreshold": 85,
        "highQueueLengthThreshold": 100
      },
      "performance": {
        "enableMetrics": true,
        "metricsInterval": 10000,
        "enableTracing": true,
        "enableProfiling": true
      }
    }

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: temporal-worker-hpa
  namespace: temporal
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: temporal-worker
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: temporal_task_queue_length
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: temporal-worker-pdb
  namespace: temporal
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: temporal-worker

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: temporal-worker-network-policy
  namespace: temporal
spec:
  podSelector:
    matchLabels:
      app: temporal-worker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: temporal-server
    ports:
    - protocol: TCP
      port: 7233
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53